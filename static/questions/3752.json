{
  "questionId": "3826",
  "title": "Maximum Profit from Valid Topological Order in DAG",
  "content": "<p>You are given a <strong>Directed Acyclic Graph (DAG)</strong> with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, represented by a 2D array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates a directed edge from node <code>u<sub>i</sub></code> to <code>v<sub>i</sub></code>. Each node has an associated <strong>score</strong> given in an array <code>score</code>, where <code>score[i]</code> represents the score of node <code>i</code>.</p>\n\n<p>You must process the nodes in a <strong>valid topological order</strong>. Each node is assigned a <strong>1-based position</strong> in the processing order.</p>\n\n<p>The <strong>profit</strong> is calculated by summing up the product of each node&#39;s score and its position in the ordering.</p>\n\n<p>Return the <strong>maximum </strong>possible profit achievable with an optimal topological order.</p>\n\n<p>A <strong>topological order</strong> of a DAG is a linear ordering of its nodes such that for every directed edge <code>u &rarr; v</code>, node <code>u</code> comes before <code>v</code> in the ordering.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, edges = [[0,1]], score = [2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2025/03/10/screenshot-2025-03-11-at-021131.png\" style=\"width: 200px; height: 89px;\" /></p>\n\n<p>Node 1 depends on node 0, so a valid order is <code>[0, 1]</code>.</p>\n\n<table style=\"border: 1px solid black;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">Node</th>\n\t\t\t<th style=\"border: 1px solid black;\">Processing Order</th>\n\t\t\t<th style=\"border: 1px solid black;\">Score</th>\n\t\t\t<th style=\"border: 1px solid black;\">Multiplier</th>\n\t\t\t<th style=\"border: 1px solid black;\">Profit Calculation</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\">1st</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">2 &times; 1 = 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">2nd</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">3 &times; 2 = 6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The maximum total profit achievable over all valid topological orders is <code>2 + 6 = 8</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, edges = [[0,1],[0,2]], score = [1,6,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">25</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/03/10/screenshot-2025-03-11-at-023558.png\" style=\"width: 200px; height: 124px;\" /></p>\n\n<p>Nodes 1 and 2 depend on node 0, so the most optimal valid order is <code>[0, 2, 1]</code>.</p>\n\n<table data-end=\"1197\" data-start=\"851\" node=\"[object Object]\" style=\"border: 1px solid black;\">\n\t<thead data-end=\"920\" data-start=\"851\">\n\t\t<tr data-end=\"920\" data-start=\"851\">\n\t\t\t<th data-end=\"858\" data-start=\"851\" style=\"border: 1px solid black;\">Node</th>\n\t\t\t<th data-end=\"877\" data-start=\"858\" style=\"border: 1px solid black;\">Processing Order</th>\n\t\t\t<th data-end=\"885\" data-start=\"877\" style=\"border: 1px solid black;\">Score</th>\n\t\t\t<th data-end=\"898\" data-start=\"885\" style=\"border: 1px solid black;\">Multiplier</th>\n\t\t\t<th data-end=\"920\" data-start=\"898\" style=\"border: 1px solid black;\">Profit Calculation</th>\n\t\t</tr>\n\t</thead>\n\t<tbody data-end=\"1197\" data-start=\"991\">\n\t\t<tr data-end=\"1059\" data-start=\"991\">\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\">1st</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1 &times; 1 = 1</td>\n\t\t</tr>\n\t\t<tr data-end=\"1128\" data-start=\"1060\">\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">2nd</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">3 &times; 2 = 6</td>\n\t\t</tr>\n\t\t<tr data-end=\"1197\" data-start=\"1129\">\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">3rd</td>\n\t\t\t<td style=\"border: 1px solid black;\">6</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\">6 &times; 3 = 18</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The maximum total profit achievable over all valid topological orders is <code>1 + 6 + 18 = 25</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == score.length &lt;= 22</code></li>\n\t<li><code>1 &lt;= score[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>edges[i] == [u<sub>i</sub>, v<sub>i</sub>]</code> denotes a directed edge from <code>u<sub>i</sub></code> to <code>v<sub>i</sub></code>.</li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>\n\t<li>There are no duplicate edges.</li>\n</ul>\n",
  "difficulty": "Hard",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    },
    {
      "name": "Graph",
      "slug": "graph"
    },
    {
      "name": "Topological Sort",
      "slug": "topological-sort"
    },
    {
      "name": "Bitmask",
      "slug": "bitmask"
    }
  ]
}