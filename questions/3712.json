{
  "questionId": "3797",
  "title": "Design Spreadsheet",
  "content": "<p>A spreadsheet is a grid with 26 columns (labeled from <code>&#39;A&#39;</code> to <code>&#39;Z&#39;</code>) and a given number of <code>rows</code>. Each cell in the spreadsheet can hold an integer value between 0 and 10<sup>5</sup>.</p>\n\n<p>Implement the <code>Spreadsheet</code> class:</p>\n\n<ul>\n\t<li><code>Spreadsheet(int rows)</code> Initializes a spreadsheet with 26 columns (labeled <code>&#39;A&#39;</code> to <code>&#39;Z&#39;</code>) and the specified number of rows. All cells are initially set to 0.</li>\n\t<li><code>void setCell(String cell, int value)</code> Sets the value of the specified <code>cell</code>. The cell reference is provided in the format <code>&quot;AX&quot;</code> (e.g., <code>&quot;A1&quot;</code>, <code>&quot;B10&quot;</code>), where the letter represents the column (from <code>&#39;A&#39;</code> to <code>&#39;Z&#39;</code>) and the number represents a <strong>1-indexed</strong> row.</li>\n\t<li><code>void resetCell(String cell)</code> Resets the specified cell to 0.</li>\n\t<li><code>int getValue(String formula)</code> Evaluates a formula of the form <code>&quot;=X+Y&quot;</code>, where <code>X</code> and <code>Y</code> are <strong>either</strong> cell references or non-negative integers, and returns the computed sum.</li>\n</ul>\n\n<p><strong>Note:</strong> If <code>getValue</code> references a cell that has not been explicitly set using <code>setCell</code>, its value is considered 0.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong><br />\n<span class=\"example-io\">[&quot;Spreadsheet&quot;, &quot;getValue&quot;, &quot;setCell&quot;, &quot;getValue&quot;, &quot;setCell&quot;, &quot;getValue&quot;, &quot;resetCell&quot;, &quot;getValue&quot;]<br />\n[[3], [&quot;=5+7&quot;], [&quot;A1&quot;, 10], [&quot;=A1+6&quot;], [&quot;B2&quot;, 15], [&quot;=A1+B2&quot;], [&quot;A1&quot;], [&quot;=A1+B2&quot;]]</span></p>\n\n<p><strong>Output:</strong><br />\n<span class=\"example-io\">[null, 12, null, 16, null, 25, null, 15] </span></p>\n\n<p><strong>Explanation</strong></p>\nSpreadsheet spreadsheet = new Spreadsheet(3); // Initializes a spreadsheet with 3 rows and 26 columns<br data-end=\"321\" data-start=\"318\" />\nspreadsheet.getValue(&quot;=5+7&quot;); // returns 12 (5+7)<br data-end=\"373\" data-start=\"370\" />\nspreadsheet.setCell(&quot;A1&quot;, 10); // sets A1 to 10<br data-end=\"423\" data-start=\"420\" />\nspreadsheet.getValue(&quot;=A1+6&quot;); // returns 16 (10+6)<br data-end=\"477\" data-start=\"474\" />\nspreadsheet.setCell(&quot;B2&quot;, 15); // sets B2 to 15<br data-end=\"527\" data-start=\"524\" />\nspreadsheet.getValue(&quot;=A1+B2&quot;); // returns 25 (10+15)<br data-end=\"583\" data-start=\"580\" />\nspreadsheet.resetCell(&quot;A1&quot;); // resets A1 to 0<br data-end=\"634\" data-start=\"631\" />\nspreadsheet.getValue(&quot;=A1+B2&quot;); // returns 15 (0+15)</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows &lt;= 10<sup>3</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>The formula is always in the format <code>&quot;=X+Y&quot;</code>, where <code>X</code> and <code>Y</code> are either valid cell references or <strong>non-negative</strong> integers with values less than or equal to <code>10<sup>5</sup></code>.</li>\n\t<li>Each cell reference consists of a capital letter from <code>&#39;A&#39;</code> to <code>&#39;Z&#39;</code> followed by a row number between <code>1</code> and <code>rows</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made in <strong>total</strong> to <code>setCell</code>, <code>resetCell</code>, and <code>getValue</code>.</li>\n</ul>\n",
  "difficulty": "Medium",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    }
  ]
}