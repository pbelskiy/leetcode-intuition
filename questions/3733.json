{
  "questionId": "3827",
  "title": "Implement Router",
  "content": "<p>Design a data structure that can efficiently manage data packets in a network router. Each data packet consists of the following attributes:</p>\n\n<ul>\n\t<li><code>source</code>: A unique identifier for the machine that generated the packet.</li>\n\t<li><code>destination</code>: A unique identifier for the target machine.</li>\n\t<li><code>timestamp</code>: The time at which the packet arrived at the router.</li>\n</ul>\n\n<p>Implement the <code>Router</code> class:</p>\n\n<p><code>Router(int memoryLimit)</code>: Initializes the Router object with a fixed memory limit.</p>\n\n<ul>\n\t<li><code>memoryLimit</code> is the <strong>maximum</strong> number of packets the router can store at any given time.</li>\n\t<li>If adding a new packet would exceed this limit, the <strong>oldest</strong> packet must be removed to free up space.</li>\n</ul>\n\n<p><code>bool addPacket(int source, int destination, int timestamp)</code>: Adds a packet with the given attributes to the router.</p>\n\n<ul>\n\t<li>A packet is considered a duplicate if another packet with the same <code>source</code>, <code>destination</code>, and <code>timestamp</code> already exists in the router.</li>\n\t<li>Return <code>true</code> if the packet is successfully added (i.e., it is not a duplicate); otherwise return <code>false</code>.</li>\n</ul>\n\n<p><code>int[] forwardPacket()</code>: Forwards the next packet in FIFO (First In First Out) order.</p>\n\n<ul>\n\t<li>Remove the packet from storage.</li>\n\t<li>Return the packet as an array <code>[source, destination, timestamp]</code>.</li>\n\t<li>If there are no packets to forward, return an empty array.</li>\n</ul>\n\n<p><code>int getCount(int destination, int startTime, int endTime)</code>:</p>\n\n<ul>\n\t<li>Returns the number of packets currently stored in the router (i.e., not yet forwarded) that have the specified destination and have timestamps in the inclusive range <code>[startTime, endTime]</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that queries for <code>addPacket</code> will be made in increasing order of <code>timestamp</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong><br />\n<span class=\"example-io\">[&quot;Router&quot;, &quot;addPacket&quot;, &quot;addPacket&quot;, &quot;addPacket&quot;, &quot;addPacket&quot;, &quot;addPacket&quot;, &quot;forwardPacket&quot;, &quot;addPacket&quot;, &quot;getCount&quot;]<br />\n[[3], [1, 4, 90], [2, 5, 90], [1, 4, 90], [3, 5, 95], [4, 5, 105], [], [5, 2, 110], [5, 100, 110]]</span></p>\n\n<p><strong>Output:</strong><br />\n<span class=\"example-io\">[null, true, true, false, true, true, [2, 5, 90], true, 1] </span></p>\n\n<p><strong>Explanation</strong></p>\nRouter router = new Router(3); // Initialize Router with memoryLimit of 3.<br />\nrouter.addPacket(1, 4, 90); // Packet is added. Return True.<br />\nrouter.addPacket(2, 5, 90); // Packet is added. Return True.<br />\nrouter.addPacket(1, 4, 90); // This is a duplicate packet. Return False.<br />\nrouter.addPacket(3, 5, 95); // Packet is added. Return True<br />\nrouter.addPacket(4, 5, 105); // Packet is added, <code>[1, 4, 90]</code> is removed as number of packets exceeds memoryLimit. Return True.<br />\nrouter.forwardPacket(); // Return <code>[2, 5, 90]</code> and remove it from router.<br />\nrouter.addPacket(5, 2, 110); // Packet is added. Return True.<br />\nrouter.getCount(5, 100, 110); // The only packet with destination 5 and timestamp in the inclusive range <code>[100, 110]</code> is <code>[4, 5, 105]</code>. Return 1.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong><br />\n<span class=\"example-io\">[&quot;Router&quot;, &quot;addPacket&quot;, &quot;forwardPacket&quot;, &quot;forwardPacket&quot;]<br />\n[[2], [7, 4, 90], [], []]</span></p>\n\n<p><strong>Output:</strong><br />\n<span class=\"example-io\">[null, true, [7, 4, 90], []] </span></p>\n\n<p><strong>Explanation</strong></p>\nRouter router = new Router(2); // Initialize <code>Router</code> with <code>memoryLimit</code> of 2.<br />\nrouter.addPacket(7, 4, 90); // Return True.<br />\nrouter.forwardPacket(); // Return <code>[7, 4, 90]</code>.<br />\nrouter.forwardPacket(); // There are no packets left, return <code>[]</code>.</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= memoryLimit &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= source, destination &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= startTime &lt;= endTime &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>addPacket</code>, <code>forwardPacket</code>, and <code>getCount</code> methods altogether.</li>\n\t<li>queries for <code>addPacket</code> will be made in increasing order of <code>timestamp</code>.</li>\n</ul>\n",
  "difficulty": "Medium",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Queue",
      "slug": "queue"
    },
    {
      "name": "Ordered Set",
      "slug": "ordered-set"
    }
  ]
}